// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mongohandler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MongoHandlerClient is the client API for MongoHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MongoHandlerClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type mongoHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoHandlerClient(cc grpc.ClientConnInterface) MongoHandlerClient {
	return &mongoHandlerClient{cc}
}

func (c *mongoHandlerClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/mongohandler.MongoHandler/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoHandlerServer is the server API for MongoHandler service.
// All implementations must embed UnimplementedMongoHandlerServer
// for forward compatibility
type MongoHandlerServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedMongoHandlerServer()
}

// UnimplementedMongoHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedMongoHandlerServer struct {
}

func (UnimplementedMongoHandlerServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMongoHandlerServer) mustEmbedUnimplementedMongoHandlerServer() {}

// UnsafeMongoHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoHandlerServer will
// result in compilation errors.
type UnsafeMongoHandlerServer interface {
	mustEmbedUnimplementedMongoHandlerServer()
}

func RegisterMongoHandlerServer(s grpc.ServiceRegistrar, srv MongoHandlerServer) {
	s.RegisterService(&MongoHandler_ServiceDesc, srv)
}

func _MongoHandler_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoHandlerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongohandler.MongoHandler/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoHandlerServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoHandler_ServiceDesc is the grpc.ServiceDesc for MongoHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mongohandler.MongoHandler",
	HandlerType: (*MongoHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _MongoHandler_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongo-handler/mongo-handler.proto",
}
